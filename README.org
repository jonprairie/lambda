:PROPERTIES:
:ID:       7a60c3c6-8a97-43e9-a577-6891158899a6
:END:
#+title: (λ)lambda

* simple lambda syntax for anonymous functions

** why?
why not?...

** examples

*** in the beginning, equivalent to (constantly 5)
#+begin_src common-lisp
(λ 5)
#+end_src

*** basic usage, equivalent to 1+
#+begin_src common-lisp
(mapcar (λx. + x 1) (list 1 2 3 4 5))

;;==> (2 3 4 5 6)
#+end_src

*** multiple bound variables are supported
#+begin_src common-lisp
(reduce (λxy. + x y) (loop for x from 1 to 100 collect x))
;;==> 5050
#+end_src

*** we can call immediately when in head position
#+begin_src common-lisp
((λx. format nil "are we scheme? ~a~%" x) "...close, but not quite")
;;==> "are we scheme? ...close, but not quite"
#+end_src

*** lets go deeper, another 1+ implementation
#+begin_src common-lisp
((λxλy. + x y) 1)
#+end_src

*** unfortunately this doesn't work, hence we're not quite scheme
#+begin_src common-lisp
(((λxλy. + x y) 1) 2)         ;; ==> death
(funcall ((λxλy. + x y) 1) 2) ;; ==> 3
#+end_src

*** also, don't do this
#+begin_src common-lisp
(λt. + t 1) ;; ==> more death
#+end_src

*** the trailing period isn't necessary if you don't want the implicit list
#+begin_src common-lisp
(when (= ((λx (+ x 1)) 1)
       (1+ 1))
    "1+ again")
;;==> "1+ again"
#+end_src

*** all other periods are ignored
#+begin_src common-lisp
(λa.λb.λc.λd.λe.λf.λg.λh.λi "for readability")
;;==> (LAMBDA (A) (LAMBDA (B) (LAMBDA (C) (LAMBDA (D) (LAMBDA (E) (LAMBDA (F) (LAMBDA (G) (LAMBDA (H) (LAMBDA (I) "for readability")))))))))
#+end_src

* install

clone to your local-projects directory
#+begin_src bash
cd ~/quicklisp/local-projects
git clone https://github.com/jonprairie/lambda.git
#+end_src

then load with quicklisp
#+begin_src common-lisp
(ql:quickload :lambda)
(lambda:use-syntax)
#+end_src

* future

this was mostly for fun, to see if i could do it. that being said,
it's surprisingly handy. i find myself reaching for λ much more frequently
than expected. on that note there are a couple more features i'd like to
explore:

- [X] add to ultralisp
- [ ] add to quicklisp
- [ ] better error handling and messaging
- [ ] auto-calling nested lambdas in head position
- [ ] variables longer than a single letter
- [ ] better print representation for λ's
- [ ] better implementation
